all_words_in_title:
    when normalizing product title and query columns
    they get simplified, mainly because of lemmatization
    so if we have "walks" in title and "walk" in query
    then all_words_in_title will still match on that word.
    When using normalized qp the slope of the model line is a little bit steeper.
    When using only the feature all_words_in_title r-squared with normalized_qp.csv
    is 0.007. When using query_product.csv r-squared is 0.05.
    So all_words_in_title provides a better fit when using query_product.csv
    It does make sense because query_product is the real data
    and normalized_qp is "simplified" data because more words map to the same
    lemmatized word. Mainly because of the higher r-squared value 
    we used query_product.csv instead of normalized_qp.csv
    Analyze logistic classification
qfscore:
    To determine the qfscore we use the normalized product title and
    normalized search term. the coefficient is 0.1725 which makes sense
    because the higher the qfscore the higher the relevance. QF-scoring
    separates more important words from less important words where
    importance is determined by their query frequency. Reconsidering this
    we just want to predict the relevance and not think about what to return
    when there are not many answers. So qf might be not such an effective feature.
    When we look at the scatter plot though. We can see the higher the qf sum
    The less low relevance scores there are. So we are filtering out the tuples
    with lower relevance score, so this might be a good feature after all.
    And the slope is pretty high 0.1725 which is good. 
    Analyze logistic classification
titleidfscore:
    To determine the idfscore we use the normalized product title and 
    normalized search term. We separate less important words from 
    more important words where importance is determined by how
    often a word appears in the database. The more it appears
    the less important the word is, is the assumption.
    More analysis of linear regression
    More analisys of logistic classification
pdidfscore:
    To determine the idfscore we use the normalized product title and 
    normalized search term. We separate less important words from 
    more important words where importance is determined by how
    often a word appears in the database. The more it appears
    the less important the word is, is the assumption.
    More analysis of linear regression
    More analisys of logistic classification
amount_of_shared_words:
    We made a feature that counts all the words that are shared between
    the product title and the search terms. When using the normalized
    data the shared word counting seems to be much more effective than
    when using the not normalized data.
    Normalized r2=0.06 > not-normalized r2=0.003
    More analysis
word_difference_ratio:
    We tried out a different feature that is strongly correlated to amount amount_of_shared_words
    Just to see which one yields better results so we could chose the better of the two.
    word_difference_ratio looks the length of set of all words that are not shared
    between the search_term and product title. And divide it by the
    length of the union of search_term and product_title.
    It turns out word_difference has a higher r2 value.
    And in the proportional logistic part word_difference_ratio 
    predicts relevance==2 quite much better, relevance==3 slightly worse.
    But in the multinomial logistic part it doessnt try to predict any relevance==1
    where are shared_words does try to predict relevance==1 and does so 
    some of them correctly. So we prefer shared_words over word_difference_ratio
shared_words_pd:
    We also look at how many of the search title and description share words.
    We will keep this feature, but difference_word_ratio is better because the correlation
    is less strong with all_words_in_title.
    Analyze regressions. 
First correlation test:
    It seems that normalized_shared_words, normalized_shared_words_pd, titleidf_score
    and pd_idf_score are all strongly correlated. Which makes sense
    If a word appears in the title its gonna appear in the description most likely too.
    And both idf and shared words scores are higher the more search term words
    match with words in descr/title, they both have a sum that gets incremented
    for each matching word. So we have to remove atleast 3 of them.
    Looking at the correlation matrix it seems that pd_idf_score correlates
    the least with all_words in title and qf_score, the ones we want to keep.
    So we decided to keep pd_idf_score and get rid of the other 3.

